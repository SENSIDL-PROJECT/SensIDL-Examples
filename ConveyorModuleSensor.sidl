/* *
 * In diesem Beispiel soll durch SensIDL ein Sensor eines F√∂rdertechnikmodules beschrieben werden. Der Sensor misst zum einen die
 * Geschwindigkeit, mit der das Modul verschiedene Pakete transportiert. Zum anderen besitzt der Sensor einen Z√§hler - der wiederum
 * die Anzahl der transportierten Paktete z√§hlt - sowie ein Ma√ü √ºber die aktuelle Dauer des Betriebs. √úber die Methode "Throughput" 
 * kann der Durchsatz eines F√∂rdertechnikmodules berechnet werden.
 */

/* *
 * √úber die Optionen kann angegeben werden, in welcher Sprache der Code f√ºr die Empf√§nger- und Sensorseite generiert werden soll.
 */ 
 datamodel {
 	options {
 		Endianess : BIG_ENDIAN
		sensor language : JAVA
		receiver language : JAVA
	}

	/* *
	 * Deklaration von verschiedenen Repr√§sentationen die bestimmte Daten besitzen kˆnnen.
	 */ 
	repr twoByteShort is 2 byte in SHORT
	repr oneByteInt is 1 byte in INT
	repr oneByteShort is 1 byte in SHORT
	repr eightByteByte is 8 byte in CHAR
	
	/* *
	 * Standard-Struktur: Deklaration eines "Payloads", welcher die Daten beinhaltet.
	 */
	set Payload {
		set Data {
		
			/* *
	 		 * In "Metadata" k√∂nnen verschiedene Metadaten spezifiziert werden, wie beispielsweise die Softwareversions.
	 		 */	
			set Metadata {
				const SoftwareVersion as twoByteShort 
				const ConveyorModuleID as oneByteInt
			}
			
			/* *
	 		 * Gruppierung der Messwerte des Sensors. In diesem Falls misst der Sensor die Geschwindigkeit des Moduls.
	 		 */	
			set Measurements {
				data of Velocity in "m/s" as twoByteShort
			}
			
			/* *
	 		 * Gruppierung von bestimmten Messwerten, welche sp√§ter f√ºr die Berechnung des Durchsatzes gebraucht werden.
	 		 */	
			set ThroughputParameter {
				data of PacketCounter as oneByteInt
				data of currentDuration in "s" as oneByteInt
				/* *
	 		 	* Bestimmte Elemente kˆnnen optional durch eine Beschreibung beschrieben werden.
	 		 	*/	
				description : "Die Komposition ThroughputParameter gruppiert die beiden Daten "
			}
			
			/* *
	 		 * Methode zur Brechnung des Durchsatzes, welche sp√§ter durch den Entwickler implementiert werden muss.
	 		 */
			calculate Throughput
				as oneByteShort 
				by calculateThroughput
				with ( ThroughputParameter as BYTE_ARRAY )	
		}
	}
	
	/* *
	 * Methode zur Brechnung der Kodierung des "Payloads", welche sp√§ter durch den Entwickler implementiert werden muss.
	 */
	calculate base128payload
		as eightByteByte
		by base128_encode, base128_decode
		with (Payload as BYTE_ARRAY)
		
	/* *
	 * Zu √ºbermittelnde Daten.
	 */
	transmit
		base128payload
 }