/* *
 * In diesem Beispiel soll durch SensIDL ein Temperatursensor beschrieben werden. Der Sensor misst die aktuelle Temperatur eines Fl√ºssigkeitgemisches,
 * welches durch hinzuf√ºgen von verschiedenen Fl√ºssigkeiten mit unterschiedlichen Temperaturen √ºberwacht werden soll. Dabei darf sich die Temperatur 
 * eines Gemisches nur in einem bestimmten Temperatur-Intervall aufhalten. 
 */

/* *
 * √úber die Optionen kann angegeben werden, in welcher Sprache der Code f√ºr die Empf√§nger- und Sensorseite generiert werden soll.
 */ 
datamodel {
	options {
		Endianess : BIG_ENDIAN
		sensor language: JAVA
		receiver language: JAVA
	}
	
	/* *
	 * Deklaration von verschiedenen Repr‰sentationen die bestimmte Daten besitzen kˆnnen.
	 */
	repr twoByteShort is 2 byte in SHORT
	repr oneByteByte is 1 byte in CHAR 
	repr fiveByteByte is 5 byte in CHAR
	
	/* *
	 * Standard-Struktur: Deklaration eines "Payloads", welcher die Daten beinhaltet.
	 */
	set Payload {
		set Data {
		
			/* *
	 		 * In "Metadata" k√∂nnen verschiedene Metadaten spezifiziert werden, wie beispielsweise die Softwareversions.
	 		 */	
			set Metadata {
				const SoftwareVersion as twoByteShort
			}
			
			/* *
	 		 * Gruppierung der Messwerte des Sensors. In diesem Falls misst der Sensor die Temperatur des Gemisches mit angegebenen Intervall.
	 		 */	
			set Measurements {
				data of temperature in "Celsius" as twoByteShort 
					from 30 "Celsius" to 60 "Celsius"
				description : "Die Komposition Measurement kapselt einen Temperatur-Messwert, der in einen bestimmten Intervall besitzt."				 
			}
		}
		
		/* *
	 	* Deklaration der Methode "mChecksum" zur Berechnung und Pr√ºfung der Checksumme. Die Methode muss der Entwickler implementieren. 
	 	*/	
		calculate mChecksum
			as oneByteByte
			by calculateChecksum, calculateChecksum
			with (Data as BYTE_ARRAY)
	}
	
	/* *
	 * Methode zur Brechnung der Kodierung des "Payloads", welche sp√§ter durch den Entwickler implementiert werden muss.
	 */
	calculate base128payload
		as fiveByteByte
		by base128_encode, base128_decode
		with (Payload as BYTE_ARRAY)
		
	/* *
	 * Zu √ºbermittelnde Daten.
	 */
	transmit
		base128payload	
}